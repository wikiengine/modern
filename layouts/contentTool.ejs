<%
const contentTool = {
  init() {
    this.calculate();
  },
  main: [],
  menu: [],
  get data() {
    return page.data;
  },
  calculate() {
    const uuid = this.data?.uuid;
    this.main = [];
    this.menu = [];
    this.page = page;
    switch(page.viewName) {
      case 'wiki':
        if (this.data.date === null) {
          this.main.push({
            to: doc_action_link(this.data.document, 'backlink'),
            title: "역링크"
          });
          this.main.push({
            to: doc_action_link(this.data.document, 'acl') + '#namespace.read',
            title: "ACL"
          });
          break;
        }
        else if (!uuid) {
          if (this.data.starred) this.main.push({
            to: doc_action_link(this.data.document, 'member/unstar'),
            tooltip: "Unstar",
            html: `<span class="fa fa-star"></span> <span class="star-count">${this.data.star_count}</span>`
          });
          else if (this.data.star_count >= 0) this.main.push({
            to: doc_action_link(this.data.document, 'member/star'),
            tooltip: "Star",
            html: `<span class="fa fa-star-o"></span> <span class="star-count">${this.data.star_count}</span>`
          });
          this.main.push({
            to: doc_action_link(this.data.document, 'backlink'),
            title: "역링크"
          });
          this.main.push({
            to: doc_action_link(this.data.document, 'discuss'),
            class: this.data.discuss_progress ? 'btn-discuss-progress' : null,
            title: "토론"
          });
          if (this.data.editable === true && this.data.edit_acl_message) this.main.push({
            onclick: () => $store.skin.showEditMessage(),
            html: `<span class="fa fa-pencil-square"></span> 편집 요청`
          });
          else if (this.data.editable === false && this.data.edit_acl_message) this.main.push({
            onclick: () => $store.skin.showEditMessage(),
            html: `<span class="fa fa-lock"></span> 편집`
          });
          else this.main.push({
              to: doc_action_link(this.data.document, 'edit'),
              html: `<span class="fa fa-edit"></span> 편집`
            });
          this.main.push({
            to: doc_action_link(this.data.document, 'history', this.data.rev ? { from: this.data.rev } : undefined),
            title: "역사"
          });
          this.main.push({
            to: doc_action_link(this.data.document, 'acl'),
            title: "ACL"
          });
          if (this.data.user) {
            this.menu.push({
              to: contribution_link(this.data.user.uuid),
              title: "기여 목록"
            });
            if (session.quick_block) {
              this.menu.push({
                class: 'admin',
                onclick: () => State.openQuickACLGroup({
                  username: page.data.document.title,
                  note: `${doc_fulltitle(page.data.document)} 긴급차단`
                }),
                title: "사용자 차단"
              });
              this.menu.push({
                class: 'admin',
                to: `/BlockHistory?query=${this.data.user.uuid}&target=text`,
                title: "차단 내역"
              });
              this.menu.push({
                class: 'admin',
                onclick: () => navigator.clipboard.writeText(page.data.user.uuid),
                title: "UUID 복사"
              });
            }
          }
          break;
        }
      case 'raw':
      case 'blame':
      case 'revert':
      case 'diff':
        this.main.push({
          to: doc_action_link(this.data.document, 'history', this.data.rev ? { from: this.data.rev } : undefined),
          class: 'btn-info',
          title: "역사"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'w', uuid ? { uuid } : undefined),
          class: this.page.viewName === 'wiki' ? 'disabled' : null,
          title: "보기"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'raw', uuid ? { uuid } : undefined),
          class: this.page.viewName === 'raw' ? 'disabled' : null,
          title: "RAW"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'blame', uuid ? { uuid } : undefined),
          class: this.page.viewName === 'blame' ? 'disabled' : null,
          title: "blame"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'revert', uuid ? { uuid } : undefined),
          class: this.page.viewName === 'revert' ? 'disabled' : null,
          title: "되돌리기"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'diff', uuid ? { uuid } : undefined),
          class: this.page.viewName === 'diff' ? 'disabled' : null,
          title: "비교"
        });
        break;
      case 'notfound':
        this.main.push({
          to: doc_action_link(this.data.document, 'backlink'),
          title: "역링크"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'discuss'),
          class: this.data.discuss_progress ? 'btn-discuss-progress' : null,
          title: "토론"
        });
        if (this.data.edit_acl_message) this.main.push({
          onclick: () => $store.skin.showEditMessage(),
          html: `<span class="fa fa-lock"></span> 편집`
        });
        else this.main.push({
          to: doc_action_link(this.data.document, 'edit'),
          html: `<span class="fa fa-edit"></span> 편집`
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'history', this.data.rev ? { from: this.data.rev } : undefined),
          title: "역사"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl'),
          title: "ACL"
        });
        break;
      case 'edit':
        this.main.push({
          to: doc_action_link(this.data.document, 'move'),
          title: "이동"
        });
        this.main.push({
          class: "btn-danger",
          to: doc_action_link(this.data.document, 'delete'),
          title: "삭제"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'history'),
          title: "역사"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl') + '#document.edit',
          title: "ACL"
        });
        break;
      case 'edit_edit_request':
        this.main.push({
          to: doc_action_link(this.data.document, 'history'),
          title: "역사"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl') + '#document.edit_request',
          title: "ACL"
        });
        break;
      case 'history':
        this.main.push({
          to: doc_action_link(this.data.document, 'discuss'),
          title: "토론"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'edit'),
          title: "편집"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl'),
          title: "ACL"
        });
        break;
      case 'thread_list':
        this.main.push({
          to: doc_action_link(this.data.document, 'edit'),
          title: "편집"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl') + '#document.create_thread',
          title: "ACL"
        });
        break;
      case 'thread_list_close':
      case 'edit_request_close':
        this.main.push({
          to: doc_action_link(this.data.document, 'discuss'),
          title: "토론"
        });
        break;
      case 'thread':
        this.main.push({
          to: doc_action_link(this.data.document, 'discuss'),
          title: "토론"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl') + '#document.write_thread_comment',
          title: "ACL"
        });
        break;
      case 'edit_request':
        this.main.push({
          to: doc_action_link(this.data.document, 'discuss'),
          title: "토론"
        });
        this.main.push({
          to: doc_action_link(this.data.document, 'acl') + '#document.edit',
          title: "ACL"
        });
        break;
      case 'contribution':
      case 'contribution_discuss':
      case 'contribution_edit_request':
        this.main.push({
          to: this.data.account.type === UserTypes.Account ? doc_action_link(user_doc(this.data.account.name), 'w') : '',
          class: this.data.account.type === UserTypes.Account ? '' : 'disabled',
          title: "사용자 문서"
        });
        if (session.quick_block) {
          if (page.data.account.type !== UserTypes.Deleted) this.menu.push({
            class: 'admin',
            onclick: () => State.openQuickACLGroup({
              username: page.data.account.type === 1 ? "".concat(page.data.account.name) : undefined,
              ip: page.data.account.type === 0 ? page.data.account.name + '/' + (page.data.account.name.indexOf('.') === -1 ? "128" : '32') : undefined,
              note: '기여 목록 긴급차단'
            }),
            title: "사용자 차단"
          });
          if (page.data.account.type === -1 && page.data.account.uuid) this.menu.push({
            to: doc_action_link(user_doc('*' + page.data.account.uuid), 'w'),
            class: 'admin',
            title: "삭제된 사용자 문서"
          });
          this.menu.push({
            class: 'admin',
            to: `/BlockHistory?query=${page.data.account.uuid}&target=text`,
            title: "차단 내역"
          });
          this.menu.push({
            class: 'admin',
            onclick: () => navigator.clipboard.writeText(page.data.account.uuid),
            title: "UUID 복사"
          });
        }
        break;
      case '':
        if (page.title === '오류') this.main.push({
          onclick: () => history.back(),
          title: "이전 화면"
        });
        break;
    }
    if (this.data.menus) this.menu = this.menu.concat(this.data.menus);
  }
};
contentTool.init();
%>

<%if(contentTool.main.length) {%>
  <div class="content-tools" :class="$store.state.getLocalConfig('liberty.admin_convenience') ? '' : 'no-admin-convenience'">
    <div class="btn-group">
      <%for(let l of contentTool.main) {%>
        <%if(l.onclick) {%>
          <a @click.prevent="<%=l.onclick.toString()%>" href="#" class="<%=[...'btn btn-secondary tools-btn'.split(' '), l.class].filter(a=>a).join(' ')%>"><%=l.title%><%-l.html%></a>
        <%} else {%>
          <a href="<%=l.to%>" class="<%=[...'btn btn-secondary tools-btn'.split(' '), l.class].filter(a=>a).join(' ')%>"><%=l.title%><%-l.html%></a>
        <%}%>
      <%}%>
      <%if(contentTool.menu.length) {%>
        <div class="dropdown btn btn-secondary tools-btn" x-data="{ open: false }">
          <div @click="open = !open">
            <div class="dropdown-toggle">
              <span class="caret"></span>
            </div>
          </div>
          <div class="open" x-cloak x-show="open" @click="open = false" @click.outside="open = false">
            <div class="dropdown-menu dropdown-menu-right" role="menu">
              <%for(let m of contentTool.menu) {%>
              <%if(m.onclick) {%>
              <a @click.prevent="<%=m.onclick.toString()%>" href="#" class="<%=['dropdown-item', m.class].filter(a=>a).join(' ')%>"><%=m.title%></a>
              <%} else {%>
              <a href="<%=m.to%>" class="<%=['dropdown-item', m.class].filter(a=>a).join(' ')%>"><%=m.title%></a>
              <%}%>
              <%}%>
            </div>
          </div>
        </div>
      <%}%>
    </div>
  </div>
<%}%>